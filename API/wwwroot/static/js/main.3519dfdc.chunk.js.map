{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","features/activities/dashboard/ActivityFilter.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttende.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextInput.tsx","app/common/form/MyTextArea.tsx","features/activities/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","features/activities/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetails.tsx","features/users/LoginForm.tsx","features/activities/errors/ValidationError.tsx","features/users/RegisterForm.tsx","app/home/HomePage.tsx","app/layout/navbar.tsx","features/activities/errors/TestError.tsx","features/activities/errors/NotFound.tsx","features/activities/errors/ServerError.tsx","app/common/modals/ModalConainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","paginaiton","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","toast","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","updateAttendeeFollowing","following","followersCount","clearSelectedActivity","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","vertical","size","style","width","marginTop","Header","icon","attached","color","Item","active","has","onClick","onChange","Reveal","animated","Content","visible","Button","fluid","hidden","basic","e","preventDefault","handleFollow","Card","as","Link","to","Image","src","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","ActivityListItemAttende","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","ActivityFilter","Loader","LoadingComponent","inverted","Dimmer","MyTextInput","props","useField","field","meta","Form","Field","touched","label","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","Value","onBlur","setTouched","placeholder","categoryOptions","text","MyDateInput","selected","useHistory","useParams","ValidationSchema","Yup","required","nullable","validationSchema","enableReinitialize","initialValues","onSubmit","uuid","handleFormSubmit","handleSubmit","isValid","isSubmitting","dirty","className","autoComplete","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","positive","type","border","resetForm","position","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","relaxed","divided","verticalAlign","Extra","email","password","setErrors","render","ValidationErrors","Message","err","i","Container","alt","isLoggedIn","fixed","NavLink","exact","header","marginRight","avatar","spaced","Dropdown","pointing","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","itemsPerRow","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","panes","menuItem","menu","menuPosition","onTabChange","activeIndex","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.3519dfdc.chunk.js","sourcesContent":["// import { Pagination } from './pagination';\r\n\r\n\r\nexport interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n     totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, paginaiton: Pagination) {\r\n        this.data = data;\r\n        this.pagination = paginaiton;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}\r\n","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { store } from '../stores/store';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } else {\r\n                toast.error(data);\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\r\n        .then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) =>\r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n  }\r\n\r\n  export class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n      Object.assign(this, init);\r\n    }\r\n  }\r\n\r\n  export class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n      if (activity) {\r\n        this.id = activity.id;\r\n        this.title = activity.title;\r\n        this.category = activity.category;\r\n        this.description = activity.description;\r\n        this.date = activity.date;\r\n        this.venue = activity.venue;\r\n        this.city = activity.city;\r\n      }\r\n    }\r\n  }","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount : number;\r\n    followingCount : number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport {format} from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    } \r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as {[key: string]: Activity[]})\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = {...this.getActivity(activity.id), ...activity}\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                } \r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees = \r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {   \r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = {...this.profile, ...profile as Profile};\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })    \r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n         } \r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n       if (this.user) this.user.image = image;\r\n    }\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayName = name;\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}\r\n\r\n","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token) {\r\n                    window.localStorage.setItem('jwt', token)\r\n                }else {\r\n                    window.localStorage.removeItem('jwt')\r\n                }\r\n            }\r\n        )\r\n    }\r\n    \r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n}","import React from 'react';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport Calendar from 'react-calendar';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer (function ActivtyFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n        <Menu vertical size='large' style={{width: '100%', marginTop:25}}>\r\n            <Header icon='filter' attached color='teal' content='Filters' />\r\n            <Menu.Item content='All Activites' \r\n                active={predicate.has('all')}\r\n                onClick={() => setPredicate('all', 'true')}\r\n            />\r\n            <Menu.Item content=\"I'm going\"\r\n                active={predicate.has('all')}\r\n                onClick={() => setPredicate('isGoing', 'true')}\r\n            />\r\n            <Menu.Item content=\"I'm hosting\"\r\n                active={predicate.has('isHost')}\r\n                onClick={() => setPredicate('isHost', 'true')}\r\n            />\r\n        </Menu>\r\n        <Header />\r\n        <Calendar\r\n        onChange={(date) => setPredicate('startDate', date as Date)}\r\n        value={predicate.get('startDate') || new Date()}\r\n        />\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Reveal, Button } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\n\r\nexport default observer(function FollowButton({profile}: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if(userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true)\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n                        <Reveal.Content visible style={{width: '100%'}}>\r\n                            <Button fluid color='teal' content={profile.following ? 'Following' : 'Not following'}/>\r\n                        </Reveal.Content>\r\n                        <Reveal.Content hidden style={{width: '100%'}}>\r\n                            <Button \r\n                                fluid \r\n                                basic\r\n                                color={profile.following ? 'red' : 'green'} \r\n                                content={profile.following ? 'Unfollow' : 'Follow'}\r\n                                loading={loading}\r\n                                onClick={(e) => handleFollow(e, profile.username)}\r\n                            />\r\n                        </Reveal.Content>\r\n                    </Reveal>\r\n    )  \r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({profile}: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>\r\n                    {profile.displayName}\r\n                </Card.Header>\r\n                <Card.Description>\r\n                {truncate(profile.bio)}\r\n                </Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n                <FollowButton profile={profile}/>\r\n            </Card.Content>\r\n        </Card>\r\n    )\r\n\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { List, Image, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport { Link } from 'react-router-dom';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function  ActivityListItemAttendee({attendees}: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup hoverable key={attendee.username}\r\n                trigger= {\r\n                    <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                <Image \r\n                size='mini'\r\n                circular \r\n                src={attendee.image || '/assets/user.png'}/>\r\n                bordered\r\n                style={attendee.following ? styles : null}\r\n            </List.Item>    \r\n                }\r\n                >\r\n                   <Popup.Content>\r\n                       <ProfileCard profile={attendee} />\r\n                       </Popup.Content>     \r\n                </Popup>\r\n                \r\n            ))}\r\n        </List>\r\n    )\r\n    \r\n})","import { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport {format} from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttende';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png' }/>\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button \r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n    const {activityStore} = useStore();\r\n    const { groupedActivities} = activityStore;\r\n\r\n  \r\n    return (\r\n        <>\r\n        {groupedActivities.map(([group, activities]) => (\r\n            <Fragment key={group}>\r\n                <Header sub color='teal'>\r\n                    {group}\r\n                </Header>\r\n            \r\n                {activities.map(activity => (\r\n                  <ActivityListItem key={activity.id} activity={activity}/>\r\n                ))}\r\n            </Fragment>\r\n        ))}\r\n        </>\r\n               \r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityFilters from './ActivityFilter';\r\nimport ActivityList from './ActivityList';\r\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                        <InfiniteScroll\r\n                            pageStart={0}\r\n                            loadMore={handleGetNext}\r\n                            hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                            initialLoad={false}\r\n                        >\r\n                            <ActivityList />\r\n                        </InfiniteScroll>\r\n                    )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content}/>\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null }\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props}/>\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null }\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select \r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.Value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null }\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'}\r\n\r\n]","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\n\r\nexport default function MyDateInput(props: Partial <ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n           <DatePicker \r\n            {...field}\r\n            {...props}\r\n            selected={(field.value && new Date(field.value)) || null}\r\n            onChange={value => helpers.setValue(value)}\r\n           />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null }\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport { useEffect, useState } from 'react';\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport { Button,  Header,  Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from './MySelectInput';\r\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from './MyDateInput';\r\nimport { Activity, ActivityFormValues } from '../../../app/models/activity';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const {createActivity, updateActivity, \r\n            loading, loadActivity, loadingInitial} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const ValidationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity describtion is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity!)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n   \r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal'/>\r\n            <Formik  \r\n            validationSchema={ValidationSchema}\r\n            enableReinitialize\r\n            initialValues={activity} \r\n            onSubmit={values => handleFormSubmit(values)}>\r\n                {({handleSubmit, isValid, isSubmitting, dirty}) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                      <MyTextInput name='title' placeholder='Title' />\r\n                    <MyTextArea rows={3} placeholder='Description'  name='description' />\r\n                    <MySelectInput options={categoryOptions} placeholder='Category'  name='category' />\r\n                    <MyDateInput  \r\n                    placeholderText='Date'  \r\n                    name='date'\r\n                    showTimeSelect\r\n                    timeCaption = 'time'\r\n                    dateFormat = 'MMMM d, yyyy h:mm aa' />\r\n                    <Header content='LOcation Details' sub color='teal'/>\r\n                    <MyTextInput placeholder='City'  name='city'/>\r\n                    <MyTextInput placeholder='Venue'  name='venue'/>\r\n                    <Button \r\n                    disabled={isSubmitting || !dirty || !isValid}\r\n                    loading={isSubmitting} floated='right' positive type='submit' content='Submit' />\r\n                    <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns'\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link}\r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                        loading={loading} onClick={updateAttendance} color='teal'>\r\n                            Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const {activityStore} = useStore();\r\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n       <Grid>\r\n           <Grid.Column width={10}>\r\n               <ActivityDetailedHeader activity={activity} />\r\n               <ActivityDetailedInfo activity={activity} />\r\n               <ActivityDetailedChat activityId={activity.id}/>\r\n           </Grid.Column>\r\n           <Grid.Column width={6}>\r\n               <ActivityDetailedSidebar activity={activity} />\r\n           </Grid.Column>\r\n       </Grid>\r\n    )\r\n})","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \r\n                setErrors({error: 'Invalid email or password'}))}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors}) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivites' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../activities/errors/ValidationError';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const {userStore} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: '',username: '',email: '', password: '', error: null}}\r\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \r\n                setErrors({error: error}))}\r\n                validationSchema={Yup.object({\r\n                    displayName: Yup.string().required(),\r\n                    username: Yup.string().required(),\r\n                    email: Yup.string().required().email(),\r\n                    password: Yup.string().required(),\r\n\r\n                })}\r\n        >\r\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivites' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage \r\n                        name='error' render={() => \r\n                        <ValidationErrors errors={errors.error}/>}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting}\r\n                        loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../../features/users/LoginForm';\r\nimport RegisterForm from '../../features/users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n\r\n                ) : (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                                Login!\r\n                        </Button>\r\n                            <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                                Register!\r\n                        </Button>\r\n                        </>\r\n\r\n                    )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} exact to='/' header>\r\n                    <img src='/assets/logo.png' alt='logo' style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\r\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} \r\n                                text='My Profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationError';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n            <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\n\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities'></Button>\r\n                Return to activities page\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}\r\n","import { observer } from 'mobx-react-lite';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\n\r\nexport default observer (function ServerError() {\r\n    const {commonStore} = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n            <Segment>\r\n                <Header as='h4' content='Stact trace' color='teal'/>\r\n                <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\r\n            </Segment>\r\n\r\n            }\r\n        </Container>\r\n    )\r\n\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\n\r\n\r\nexport default observer (function ModalConainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({setEditMode}: Props) {\r\n    const {profileStore: {profile, updateProfile}} = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{displayName: profile?.displayName, bio: profile?.bio}}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({isSubmitting, isValid, dirty}) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name' name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio' name='bio' />\r\n                    <Button \r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, {useState} from 'react';\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport {Button, Grid, Header, Tab} from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileAbout() {\r\n    const {profileStore} = useStore();\r\n    const {isCurrentUser, profile} = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> : <span style={{whiteSpace: 'pre-wrap'}}>{profile?.bio}</span>}\r\n\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react';\r\nimport {Tab, Grid, Header, Card} from \"semantic-ui-react\";\r\nimport ProfileCard from \"./ProfileCard\";\r\nimport {useStore} from \"../../app/stores/store\";\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab === 3 ? `People following ${profile!.displayName}` : `People ${profile?.displayName} is following`}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper \r\n            src={imagePreview}\r\n            style={{height: 200, width: '100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\r\n            <input {...getInputProps()} />  \r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob=> uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles}/>\r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize Image' />\r\n                {files&& files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1}/>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length >0 &&\r\n                <>\r\n                <div className='img-preview' style={{minHeight: 200, overflow: 'hidden'}} />\r\n                <Button.Group widths={2}>\r\n                    <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                    <Button disabled={loading} onClick={() => setFiles([])} positive icon='check' />\r\n                </Button.Group>\r\n                </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, \r\n            uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                            <Card.Group itemsPerRow={5}>\r\n                                {profile.photos?.map(photo => (\r\n                                    <Card key={photo.id}>\r\n                                        <Image src={photo.url} />\r\n                                        {isCurrentUser && (\r\n                                            <Button.Group fluid widths={2}>\r\n                                                <Button \r\n                                                    basic\r\n                                                    color='green'\r\n                                                    content='Main'\r\n                                                    name={'main' + photo.id}\r\n                                                    disabled={photo.isMain}\r\n                                                    loading={target === 'main' + photo.id && loading}\r\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\r\n                                                />\r\n                                                <Button \r\n                                                    basic \r\n                                                    color='red' \r\n                                                    icon='trash' \r\n                                                    loading={target === photo.id && loading}\r\n                                                    onClick={e => handleDeletePhoto(photo, e)}\r\n                                                    disabled={photo.isMain}\r\n                                                    name={photo.id}\r\n                                                />\r\n                                            </Button.Group>\r\n                                        )}\r\n                                    </Card>\r\n                                ))}\r\n                            </Card.Group>\r\n                        )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({profile}: Props) {\r\n    const {profileStore} = useStore();\r\n\r\n    const panes = [\r\n        {menuItem: 'About', render: () => <ProfileAbout />},\r\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\r\n        {menuItem: 'Events', render: () => <Tab.Pane>Events Content</Tab.Pane>},\r\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\r\n        {menuItem: 'Following', render: () => <ProfileFollowings />},\r\n    ];\r\n\r\n    return (\r\n        <Tab \r\n            menu={{fluid: true, vertical: true}}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Button, Divider, Grid, Header, Item, Reveal, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({profile}: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileContent from './ProfileContent';\r\nimport ProfileHeader from './ProfileHeader';\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React from \"react\";\r\nimport { Redirect, RouteComponentProps, RouteProps } from \"react-router\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\n\r\n    interface Props extends RouteProps {\r\n        component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n    }\r\n\r\n    export default function PrivateRoute({component: Component, ...rest}: Props) {\r\n\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n    return (\r\n        <Route \r\n        {...rest}\r\n        render={(props) => isLoggedIn ? <Component {...props}/> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport HomePage from '../home/HomePage';\nimport NavBar from './navbar';\nimport TestErrors from '../../features/activities/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/activities/errors/NotFound';\nimport ServerError from '../../features/activities/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalConainer from '../common/modals/ModalConainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(()=> {\n    if(commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    }else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore]) \n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...'/>\n  return (\n    <>\n    <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalConainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n              <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n              <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n              <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n              <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n              <PrivateRoute path='/errors' component={TestErrors} />\n              <Route path='/server-error' component={ServerError} />\n              <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n  const { pathname } = useLocation();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n  }, [pathname]);\r\n\r\n  return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport {  Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop/>\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}